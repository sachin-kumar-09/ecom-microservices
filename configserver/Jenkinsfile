pipeline {
    agent any

    environment {
        PROJECT_NAME = 'configserver'                            // Microservice name
        JAR_NAME = 'configserver-0.0.1-SNAPSHOT.jar'            // Output JAR
    }

    tools {
        maven 'Maven3'                                           // Tool names must match Jenkins Global Tools
        jdk 'JDK17'
    }

    stages {
        stage('Checkout') {
            steps {
                // ‚úÖ Clone the 'dev' branch from your GitHub repository
                git branch: 'dev', url: 'https://github.com/sachin-kumar-09/ecom-microservices.git'
            }
        }

        stage('Build') {
            steps {
                dir("${PROJECT_NAME}") {
                    // ‚öôÔ∏è Clean and build without running tests
                    bat 'mvn clean install -DskipTests'
                }
            }
        }

        stage('Unit Test') {
            steps {
                dir("${PROJECT_NAME}") {
                    // üß™ Run JUnit tests
                    bat 'mvn test'
                }
            }
        }

        stage('Deploy') {
            steps {
                dir("${PROJECT_NAME}") {
                    bat "start /B java -jar target\\%JAR_NAME%"
                    echo "üöÄ Application starting... waiting 10 seconds"
                    sleep time: 10, unit: 'SECONDS'
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    def maxRetries = 10
                    def waitSeconds = 5
                    def healthy = false

                    for (int i = 1; i <= maxRetries; i++) {
                        echo "üîÅ Attempt $i: Checking http://localhost:8888/actuator/health"
                        def result = bat(script: 'curl -s -o NUL -w "%%{http_code}" http://localhost:8888/actuator/health', returnStdout: true).trim()

                        if (result == '200') {
                            echo "‚úÖ Health check passed with response: ${result}"
                            healthy = true
                            break
                        }

                        echo "‚ùå Not healthy yet (response: ${result}) - retrying in ${waitSeconds}s..."
                        sleep time: waitSeconds, unit: 'SECONDS'
                    }

                    if (!healthy) {
                        error "‚ùå Application did not become healthy in time. Check logs or port conflict."
                    }
                }
            }
        }
    }




    post {
        success {
            echo "üéâ Build, Deploy & Health Check completed successfully for ${PROJECT_NAME}"
        }
        failure {
            echo "‚ùå Build, Test, or Health Check failed for ${PROJECT_NAME}"
        }
    }
}

